filter(Type == "N_distinct_id") %>%
arrange(date_format) %>%
mutate(month_name = ifelse(freq=="Monthly",
paste0(as.character(lubridate::month(date,label = TRUE, abbr = FALSE)),": ")))
test_dataset_static %>%
filter(freq=="Weekly") %>%
filter(table_name=="gdppr_date") %>%
filter(Type == "N_distinct_id") %>%
arrange(date_format) %>%
mutate(month_name = ifelse(freq=="Monthly",
paste0(as.character(lubridate::month(date,label = TRUE, abbr = FALSE)),": ")),NA)
test_dataset_static %>%
filter(freq=="Weekly") %>%
filter(table_name=="gdppr_date") %>%
filter(Type == "N_distinct_id") %>%
arrange(date_format) %>%
mutate(month_name = ifelse(freq=="Monthly",
paste0(as.character(lubridate::month(date,label = TRUE, abbr = FALSE)),": "),NA))
test_dataset_static %>%
#filter(freq=="Weekly") %>%
filter(table_name=="gdppr_date") %>%
filter(Type == "N_distinct_id") %>%
arrange(date_format) %>%
mutate(month_name = ifelse(freq=="Monthly",
paste0(as.character(lubridate::month(date,label = TRUE, abbr = FALSE)),": "),NA))
test_dataset_static %>%
filter(freq=="Weekly") %>%
filter(table_name=="gdppr_date") %>%
filter(Type == "N_distinct_id") %>%
arrange(date_format) %>%
mutate(month_name = ifelse(freq=="Monthly",
paste0(as.character(lubridate::month(date,label = TRUE, abbr = FALSE)),": "),NA))
test_dataset_static %>%
filter(freq=="Monthly") %>%
filter(table_name=="gdppr_date") %>%
filter(Type == "N_distinct_id") %>%
arrange(date_format) %>%
mutate(month_name = ifelse(freq=="Monthly",
paste0(as.character(lubridate::month(date,label = TRUE, abbr = FALSE)),": "),NA))
test_dataset_static %>%
filter(freq=="Monthly") %>%
filter(table_name=="gdppr_date") %>%
filter(Type == "N_distinct_id") %>%
arrange(date_format) %>%
mutate(month_name = if_else(freq=="Monthly",
paste0(as.character(lubridate::month(date,label = TRUE, abbr = FALSE)),": "),NA))
test_dataset_static %>%
filter(freq=="Monthly") %>%
filter(table_name=="gdppr_date") %>%
filter(Type == "N_distinct_id") %>%
arrange(date_format) %>%
mutate(month_name = if_else(freq=="Monthly",
paste0(as.character(lubridate::month(date,label = TRUE, abbr = FALSE)),": "),
as.character(NA)))
test_dataset_static %>%
#filter(freq=="Monthly") %>%
filter(table_name=="gdppr_date") %>%
filter(Type == "N_distinct_id") %>%
arrange(date_format) %>%
mutate(month_name = if_else(freq=="Monthly",
paste0(as.character(lubridate::month(date,label = TRUE, abbr = FALSE)),": "),
as.character(NA)))
test_dataset_static %>%
#filter(freq=="Monthly") %>%
filter(table_name=="gdppr_date") %>%
filter(Type == "N_distinct_id") %>%
arrange(date_format) %>%
mutate(month_name = if_else(freq=="Monthly",
month.name[date],
as.character(NA)))
test_dataset_static %>%
#filter(freq=="Monthly") %>%
filter(table_name=="gdppr_date") %>%
filter(Type == "N_distinct_id") %>%
arrange(date_format) %>%
mutate(date_name = if_else(freq=="Weekly",
paste0("Week ",date,": "),
if_else(freq=="Monthly",
month.name[date],
as.character(NA))))
test_dataset_static %>%
#filter(freq=="Monthly") %>%
filter(table_name=="gdppr_date") %>%
filter(Type == "N_distinct_id") %>%
arrange(date_format) %>%
mutate(date_name = if_else(freq=="Weekly",
paste0("Week ",date,": "),
if_else(freq=="Monthly",
paste0(month.name[date],": "),
as.character(NA))))
runApp()
test_dataset_static %>%
mutate(N_tooltip = format(.data$N, nsmall=1, big.mark=",")) %>%
mutate(N_tooltip_date = paste0(date_name,N_tooltip))
runApp()
shiny::runApp()
shiny::runApp()
runApp()
test_dataset_static %>%
#filter(freq=="Monthly") %>%
filter(table_name=="gdppr_date") %>%
filter(Type == "N_distinct_id") %>%
arrange(date_format) %>%
mutate(date_name = if_else(freq=="Weekly",
paste0("Week ",date,": "),
if_else(freq=="Monthly",
paste0(month.name[date],": "),
as.character(NA)))) %>%
filter(max(date_format))
test_dataset_static %>%
#filter(freq=="Monthly") %>%
filter(table_name=="gdppr_date") %>%
filter(Type == "N_distinct_id") %>%
arrange(date_format) %>%
mutate(date_name = if_else(freq=="Weekly",
paste0("Week ",date,": "),
if_else(freq=="Monthly",
paste0(month.name[date],": "),
as.character(NA))))
test_dataset_static %>%
#filter(freq=="Monthly") %>%
filter(table_name=="gdppr_date") %>%
filter(Type == "N_distinct_id") %>%
arrange(date_format) %>%
mutate(date_name = if_else(freq=="Weekly",
paste0("Week ",date,": "),
if_else(freq=="Monthly",
paste0(month.name[date],": "),
as.character(NA)))) %>%
filter(date_format == max(date_format))
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
count_options = c("Rows"="N_row","Valid IDs"="N_valid_id","Distinct IDs"="N_distinct_id")
count_options
as.data.frame(count_options)
as.tibble(count_options)
as_tibble(count_options)
as_tibble(count_options,rownames = NA)
as_tibble(count_options)
as.data.frame(count_options)
as.data.frame(count_options) %>% rownames_to_column()
as.data.frame(count_options) %>% rownames_to_column("test")
as.data.frame(count_options) %>% rownames_to_column("count_options_name")
View(test_dataset_static)
as.data.frame(count_options)
as.data.frame(count_options,"T") %>% rownames_to_column("count_options_name")
as.data.frame(count_options,"T") %>% rownames_to_column("count_options")
as.data.frame(count_options) %>% rename(Type=count_options) %>% rownames_to_column("count_options")
runApp()
runApp()
runApp()
runApp()
runApp()
dirname(rstudioapi::getSourceEditorContext()$path)
runApp()
runApp('app_module_example.R')
runApp('app_module_example.R')
runApp()
runApp('app_module_example.R')
runApp()
runApp()
runApp()
# TRE Data Dictionary
t.data_dictionary = readxl::read_excel((paste0(current_dir_data,'/Data/TRE_DD_391419_j3w9t.xlsx'))
# TRE Data Dictionary
t.data_dictionary = readxl::read_excel((paste0(current_dir_data,'/Data/TRE_DD_391419_j3w9t.xlsx')))
current_dir_data = dirname(rstudioapi::getSourceEditorContext()$path)
# TRE Data Dictionary
t.data_dictionary = readxl::read_excel((paste0(current_dir_data,'/Data/TRE_DD_391419_j3w9t.xlsx')))
View(t.data_dictionary)
read_excel_allsheets <- function(filename, tibble = FALSE, except_sheet_no = NA, skip = 0, collate = TRUE) {
# reading all the names of the sheets
sheets <- readxl::excel_sheets(filename)
# applying any exceptions eg cover sheets
if (!is.na(except_sheet_no)){
sheets <- sheets[-except_sheet_no]
}
x <- lapply(sheets, function(X) readxl::read_excel(filename, sheet = X, skip = skip))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
if (collate){
x <- dplyr::  bind_rows(x)
}
x
}
read_excel_allsheets(t.data_dictionary, tibble = FALSE, except_sheet_no = 1, skip = 2)
current_dir_data = dirname(rstudioapi::getSourceEditorContext()$path)
read_excel_allsheets(paste0(current_dir_data,'/Data/TRE_DD_391419_j3w9t.xlsx'), tibble = FALSE, except_sheet_no = 1, skip = 2)
data_dictionary = read_excel_allsheets(paste0(current_dir_data,
'/Data/TRE_DD_391419_j3w9t.xlsx'), tibble = FALSE, except_sheet_no = 1, skip = 2)
data_dictionary
View(data_dictionary)
data_dictionary %>%
filter(table=="hes_ae_{fyear}_dars_nic_391419_j3w9t") #this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
library(tidyverse)
library(tidyverse)
data_dictionary %>%
filter(table=="hes_ae_{fyear}_dars_nic_391419_j3w9t") #this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
data_dictionary %>%
filter(table=="hes_ae_{fyear}_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label)
completeness_test_data = data_dictionary %>%
filter(table=="hes_ae_{fyear}_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label)
completeness_test_data = data_dictionary %>%
filter(table=="hes_ae_{fyear}_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label)
completeness_test_data
completeness_test_data
completeness_test_data %>%
mutate(completeness = (sample.int(101,size=100,replace=TRUE)-1)/100)
completeness_test_data %>%
add_column(runif = runif(nrow(.)))
completeness_test_data %>%
mutate(runif = runif(nrow(.)))
completeness_test_data %>%
mutate(runif = runif(nrow(.)*100))
completeness_test_data %>%
mutate(runif = runif(nrow(.))*100)
completeness_test_data %>%
mutate(runif = round(runif(nrow(.))*100),2)
completeness_test_data %>%
mutate(runif = round(runif(nrow(.))*100,2))
completeness_test_data %>%
mutate(completeness = round(runif(nrow(.))*100,2))
# TRE Data Dictionary
t.data_dictionary = readxl::read_excel((paste0(current_dir_data,'/Data/TRE_DD_391419_j3w9t.xlsx')))
data_dictionary = read_excel_allsheets(paste0(current_dir_data,
'/Data/TRE_DD_391419_j3w9t.xlsx'), tibble = FALSE, except_sheet_no = 1, skip = 2)
data_dictionary = read_excel_allsheets(paste0(current_dir_data,
'/Data/TRE_DD_391419_j3w9t.xlsx'), tibble = FALSE, except_sheet_no = 1, skip = 2)
read_excel_allsheets <- function(filename, tibble = FALSE, except_sheet_no = NA, skip = 0, collate = TRUE) {
# reading all the names of the sheets
sheets <- readxl::excel_sheets(filename)
# applying any exceptions eg cover sheets
if (!is.na(except_sheet_no)){
sheets <- sheets[-except_sheet_no]
}
x <- lapply(sheets, function(X) readxl::read_excel(filename, sheet = X, skip = skip))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
if (collate){
x <- dplyr::  bind_rows(x)
}
x
}
dataset_dashboard_list = function(nation,key="Dataset available"){
nation_datasets = datasets_available %>%
filter(Key==key & Nation==nation)
nation_datasets_list = list()
groups = pull(distinct(nation_datasets,Group))
for(i in 1:length(groups)){
nation_datasets_list[[i]]=
setNames(
pull(filter(nation_datasets,Group==groups[i]),Dataset),
pull(filter(nation_datasets,Group==groups[i]),Title)
)
}
names(nation_datasets_list) = groups
return(nation_datasets_list)
}
data_dictionary = read_excel_allsheets(paste0(current_dir_data,
'/Data/TRE_DD_391419_j3w9t.xlsx'), tibble = FALSE, except_sheet_no = 1, skip = 2)
current_dir_data = dirname(rstudioapi::getSourceEditorContext()$path)
data_dictionary = read_excel_allsheets(paste0(current_dir_data,
'/Data/TRE_DD_391419_j3w9t.xlsx'), tibble = FALSE, except_sheet_no = 1, skip = 2)
library(shiny); runApp('Lars_module/module_summary_data_dictionary_dev.R')
runApp('module_summary_data_dictionary_dev.R')
runApp()
runApp()
runApp()
runApp('module_summary_dataset_description_dev.R')
# test file including dataset descriptions
dataset_desc <- read.csv("TRE_dataset_descriptions_test.csv")
runApp('module_summary_dataset_description_dev.R')
runApp()
runApp()
runApp()
runApp()
# TRE Data Dictionary
t.data_dictionary = readxl::read_excel((paste0(current_dir_data,'/Data/TRE_DD_391419_j3w9t.xlsx')))
# pull the variable names from a chosen dataset to use as test data
completeness_test_data = data_dictionary %>%
filter(table=="hes_ae_{fyear}_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label) %>%
mutate(completeness = round(runif(nrow(.))*100,2))
completeness_test_data
runApp('module_summary_dataset_completeness_dev.R')
runApp('module_summary_dataset_completeness_dev.R')
shiny::runApp()
runApp()
dataset_desc = read.csv(paste0(current_dir_data,
'/Data/TRE_dataset_descriptions.csv'))
# Datset Descriptions
dataset_desc = read.csv(paste0(current_dir_data,
'/Data/TRE_dataset_descriptions_test.csv'))
current_dir_data = dirname(rstudioapi::getSourceEditorContext()$path)
# Datset Descriptions
dataset_desc = read.csv(paste0(current_dir_data,
'/Data/TRE_dataset_descriptions_test.csv'))
runApp()
install.packages("ggtext")
runApp()
# NHS Digital TRE Data Coverage ------------------------------------------------
t.data_coverage = read.csv(paste0(current_dir_data,
'/Data/export_dashboard_NHSD_20221102_data_coverage.csv'))
View(t.data_coverage)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(t.dataset_start_dates)
View(t.data_coverage)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('app_test.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("htmltools")
library("bsplus")
install.packages("bsplus")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset")
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr")
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(date_ym, 1, sep="-"), "%Y-%m-%d"))
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(start_date, 1, sep="-"), "%Y-%m-%d")) %>%
filter()
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(start_date, 1, sep="-"), "%Y-%m-%d")) %>%
filter(start_date >= date_format)
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(start_date, 1, sep="-"), "%Y-%m-%d")) %>%
filter(!start_date >= date_format)
runApp()
format(Sys.Date(), "%Y-%m"))
format(Sys.Date(), "%Y-%m")
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(start_date, 1, sep="-"), "%Y-%m-%d"))
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(start_date, 1, sep="-"), "%Y-%m-%d"))
format(Sys.Date(), "%Y-%m")
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(start_date, 1, sep="-"), "%Y-%m-%d")) %>%
mutate(current_date = as.Date(paste(format(Sys.Date(), "%Y-%m"), 1, sep="-"), "%Y-%m-%d")))
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(start_date, 1, sep="-"), "%Y-%m-%d")) %>%
mutate(current_date = as.Date(paste(format(Sys.Date(), "%Y-%m"), 1, sep="-"), "%Y-%m-%d"))
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(start_date, 1, sep="-"), "%Y-%m-%d")) %>%
#using current month but this should be updated to use production ym in future
mutate(current_date = as.Date(paste(format(Sys.Date(), "%Y-%m"), 1, sep="-"), "%Y-%m-%d")) %>%
filter(!start_date >= date_format)
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(start_date, 1, sep="-"), "%Y-%m-%d")) %>%
#using current month but this should be updated to use production ym in future
mutate(current_date = as.Date(paste(format(Sys.Date(), "%Y-%m"), 1, sep="-"), "%Y-%m-%d")) %>%
filter(start_date >= date_format)
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(start_date, 1, sep="-"), "%Y-%m-%d")) %>%
#using current month but this should be updated to use production ym in future
mutate(current_date = as.Date(paste(format(Sys.Date(), "%Y-%m"), 1, sep="-"), "%Y-%m-%d")) %>%
filter(!start_date >= date_format)
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(start_date, 1, sep="-"), "%Y-%m-%d")) %>%
#using current month but this should be updated to use production ym in future
mutate(current_date = as.Date(paste(format(Sys.Date(), "%Y-%m"), 1, sep="-"), "%Y-%m-%d")) %>%
filter(!start_date >= date_format) %>%
arrange(date_format)
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(start_date, 1, sep="-"), "%Y-%m-%d")) %>%
#using current month but this should be updated to use production ym in future
mutate(current_date = as.Date(paste(format(Sys.Date(), "%Y-%m"), 1, sep="-"), "%Y-%m-%d")) %>%
filter(!start_date >= date_format) %>%
arrange(desc(date_format))
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(start_date, 1, sep="-"), "%Y-%m-%d")) %>%
#using current month but this should be updated to use production ym in future
mutate(current_date = as.Date(paste(format(Sys.Date(), "%Y-%m"), 1, sep="-"), "%Y-%m-%d")) %>%
filter(!start_date >= date_format) %>%
filter(date_format <= current_date)
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(start_date, 1, sep="-"), "%Y-%m-%d")) %>%
#using current month but this should be updated to use production ym in future
mutate(current_date = as.Date(paste(format(Sys.Date(), "%Y-%m"), 1, sep="-"), "%Y-%m-%d")) %>%
filter(!start_date >= date_format) %>%
filter(!date_format <= current_date)
t.data_coverage %>%
left_join(t.dataset_start_dates,by = "dataset") %>%
filter(dataset=="gdppr") %>%
mutate(start_date = as.Date(paste(start_date, 1, sep="-"), "%Y-%m-%d")) %>%
#using current month but this should be updated to use production ym in future
mutate(current_date = as.Date(paste(format(Sys.Date(), "%Y-%m"), 1, sep="-"), "%Y-%m-%d")) %>%
filter(!start_date >= date_format) %>%
filter(date_format <= current_date)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
