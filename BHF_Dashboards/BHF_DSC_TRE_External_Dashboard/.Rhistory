runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
completeness_test_data = reactive({data_dictionary %>%
filter(table=="hes_ae_{fyear}_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label) %>%
mutate(completeness = round(runif(nrow(.))*100,2))
})
completeness_test_data = data_dictionary %>%
filter(table=="hes_ae_{fyear}_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label) %>%
mutate(completeness = round(runif(nrow(.))*100,2))
completeness_plot = ggplot(data=completeness_test_data(),
#%>%
#mutate(answer = fct_relevel(.data$display_name_label, (() %>% pull()))),
aes(x=reorder(display_name_label, completeness),
y=completeness,
fill = as.factor(completeness),
tooltip = completeness,
data_id = display_name_label)) +
geom_bar_interactive() +
coord_flip(clip = 'off')  +
labs(x="",y="BLAH") +
theme(
plot.title = element_markdown(size = 11, lineheight = 1.2),
plot.subtitle = element_markdown(size = 11, lineheight = 1.2),
legend.position = "none",
plot.title.position = 'plot', #align to outer margin; applies to subtitle too
#panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.margin = margin(0,30,0,0)
)
completeness_plot = ggplot(data=completeness_test_data,
#%>%
#mutate(answer = fct_relevel(.data$display_name_label, (() %>% pull()))),
aes(x=reorder(display_name_label, completeness),
y=completeness,
fill = as.factor(completeness),
tooltip = completeness,
data_id = display_name_label)) +
geom_bar_interactive() +
coord_flip(clip = 'off')  +
labs(x="",y="BLAH") +
theme(
plot.title = element_markdown(size = 11, lineheight = 1.2),
plot.subtitle = element_markdown(size = 11, lineheight = 1.2),
legend.position = "none",
plot.title.position = 'plot', #align to outer margin; applies to subtitle too
#panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.margin = margin(0,30,0,0)
)
completeness_plot
ggplot(data=completeness_test_data,
#%>%
#mutate(answer = fct_relevel(.data$display_name_label, (() %>% pull()))),
aes(x=display_name_label,
y=completeness,
fill = as.factor(completeness),
tooltip = completeness,
data_id = display_name_label)) +
geom_bar_interactive() +
coord_flip(clip = 'off')  +
labs(x="",y="BLAH") +
theme(
plot.title = element_markdown(size = 11, lineheight = 1.2),
plot.subtitle = element_markdown(size = 11, lineheight = 1.2),
legend.position = "none",
plot.title.position = 'plot', #align to outer margin; applies to subtitle too
#panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.margin = margin(0,30,0,0)
)
ggplot(data=completeness_test_data(),
#%>%
#mutate(answer = fct_relevel(.data$display_name_label, (() %>% pull()))),
aes(x=reorder(display_name_label, completeness),
y=completeness,
fill = as.factor(completeness),
tooltip = completeness,
data_id = display_name_label)) +
geom_bar_interactive(stat="identity") +
coord_flip(clip = 'off')  +
labs(x="",y="BLAH") +
theme(
plot.title = element_markdown(size = 11, lineheight = 1.2),
plot.subtitle = element_markdown(size = 11, lineheight = 1.2),
legend.position = "none",
plot.title.position = 'plot', #align to outer margin; applies to subtitle too
#panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.margin = margin(0,30,0,0)
)
ggplot(data=completeness_test_data,
#%>%
#mutate(answer = fct_relevel(.data$display_name_label, (() %>% pull()))),
aes(x=reorder(display_name_label, completeness),
y=completeness,
fill = as.factor(completeness),
tooltip = completeness,
data_id = display_name_label)) +
geom_bar_interactive(stat="identity") +
coord_flip(clip = 'off')  +
labs(x="",y="BLAH") +
theme(
plot.title = element_markdown(size = 11, lineheight = 1.2),
plot.subtitle = element_markdown(size = 11, lineheight = 1.2),
legend.position = "none",
plot.title.position = 'plot', #align to outer margin; applies to subtitle too
#panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.margin = margin(0,30,0,0)
)
ggplot(data=completeness_test_data,
#%>%
#mutate(answer = fct_relevel(.data$display_name_label, (() %>% pull()))),
aes(x=reorder(display_name_label, completeness),
y=completeness,
fill = as.factor(completeness),
tooltip = completeness,
data_id = display_name_label)) +
geom_bar_interactive() +
coord_flip(clip = 'off')  +
labs(x="",y="BLAH") +
theme(
plot.title = element_markdown(size = 11, lineheight = 1.2),
plot.subtitle = element_markdown(size = 11, lineheight = 1.2),
legend.position = "none",
plot.title.position = 'plot', #align to outer margin; applies to subtitle too
#panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.margin = margin(0,30,0,0)
)
completeness_plot = ggplot(data=completeness_test_data,
#%>%
#mutate(answer = fct_relevel(.data$display_name_label, (() %>% pull()))),
aes(x=reorder(display_name_label, completeness),
y=completeness,
fill = as.factor(completeness),
tooltip = completeness,
data_id = display_name_label)) +
geom_bar_interactive(stat="identity") +
coord_flip(clip = 'off')  +
labs(x="",y="BLAH") +
theme(
plot.title = element_markdown(size = 11, lineheight = 1.2),
plot.subtitle = element_markdown(size = 11, lineheight = 1.2),
legend.position = "none",
plot.title.position = 'plot', #align to outer margin; applies to subtitle too
#panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.margin = margin(0,30,0,0)
)
ggiraph::girafe(ggobj = (completeness_plot)) %>%
girafe_options(opts_hover(css = ""), #want shape to inherit the underlying aes on hover whilst other shapes go inv
opts_hover_inv(css = "opacity:0.3;"),
opts_tooltip(
opacity = .95,
css = "background-color:#1D2F5D;
color:white;font-size:10pt;font-style:italic;
padding:5px;border-radius:10px 10px 10px 10px;"
),
opts_toolbar(saveaspng = FALSE),
opts_selection(type="none"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data_dictionary)
runApp()
runApp()
data_dictionary %>%
filter(table=="gdppr_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label) %>%
mutate(display_name_label = str_squish(display_name_label)) %>%
mutate(completeness = round(runif(nrow(.))*100,2))
data_dictionary %>%
filter(table=="gdppr_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label) %>%
mutate(display_name_label = str_squish(display_name_label)) %>%
mutate(completeness = round(runif(nrow(.))*100,2))
test=data_dictionary %>%
filter(table=="gdppr_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label) %>%
mutate(display_name_label = str_squish(display_name_label)) %>%
mutate(completeness = round(runif(nrow(.))*100,2))
View(test)
runApp()
runApp()
runApp()
test=data_dictionary %>%
filter(table=="gdppr_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label) %>%
mutate(display_name_label = trimws(display_name_label)) %>%
mutate(completeness = round(runif(nrow(.))*100,2))
test=data_dictionary %>%
filter(table=="gdppr_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label) %>%
mutate(display_name_label = trimws(display_name_label)) %>%
mutate(completeness = round(runif(nrow(.))*100,2))
View(test)
test %>% select(display_name_label)
test %>% select(display_name_label)[1]
test %>% select(display_name_label)
test %>% select(display_name_label) %>% pull()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(test)
runApp()
runApp()
runApp()
colfunc <- colorRampPalette(c("#94409F", "#BC366C", "#E1324C", "#F82D2E", "#FC7F47", "#FEB958"))
colfunc(10)
data_dictionary %>%
filter(table=="gdppr_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label) %>%
mutate(display_name_label = trimws(display_name_label)) %>%
mutate(completeness = round(runif(nrow(.))*100,2))
set.seed(1)
data_dictionary %>%
filter(table=="gdppr_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label) %>%
mutate(display_name_label = trimws(display_name_label)) %>%
mutate(completeness = round(runif(nrow(.))*100,2))
set.seed(1)
data_dictionary %>%
filter(table=="gdppr_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label) %>%
mutate(display_name_label = trimws(display_name_label)) %>%
mutate(completeness = round(runif(nrow(.))*100,2))
data_dictionary %>%
filter(table=="gdppr_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label) %>%
mutate(display_name_label = trimws(display_name_label)) %>%
mutate(completeness = round(runif(nrow(.))*100,2)) %>%
arrange(completeness)
data_dictionary %>%
filter(table=="gdppr_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label) %>%
mutate(display_name_label = trimws(display_name_label)) %>%
mutate(completeness = round(runif(nrow(.))*100,2)) %>%
arrange(desc(completeness))
data_dictionary %>%
filter(table=="gdppr_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label) %>%
mutate(display_name_label = trimws(display_name_label)) %>%
mutate(completeness = round(runif(nrow(.))*100,2)) %>%
arrange(desc(completeness))
set.seed(1)
test = data_dictionary %>%
filter(table=="gdppr_dars_nic_391419_j3w9t") %>%
#this will be reactive and table names need aligned to input table names in addition to the table names used when data downloaded from TRE in aggreagate
select(display_name_label) %>%
mutate(display_name_label = trimws(display_name_label)) %>%
mutate(completeness = round(runif(nrow(.))*100,2)) %>%
arrange(desc(completeness))
test
nrow(test)
test
colorCompleteness <- colorRampPalette(c("#94409F", "#BC366C", "#E1324C", "#F82D2E", "#FC7F47", "#FEB958"))
test %>% select(display_name_label) %>% pull()
setNames(
test %>% select(display_name_label) %>% pull(),
colfunc(nrow(test))
)
setNames(
colfunc(nrow(test)),
test %>% select(display_name_label) %>% pull(),
)
setNames(
colfunc(nrow(test)),
(test %>% select(display_name_label) %>% pull())
)
values = c("A" = "#353436",
"B" = "#1b98e0",
"C" = "red",
"D" = "red",
"E" = "green")
values
setNames(
colfunc(nrow(test)),
(test %>% select(display_name_label) %>% pull())
)
values
setNames(
colfunc(nrow(test)),
(test %>% select(display_name_label) %>% pull())
)
colorCompleteness <- colorRampPalette(c("#94409F", "#BC366C", "#E1324C", "#F82D2E", "#FC7F47", "#FEB958"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(tidyverse)
current_dir_data = dirname(rstudioapi::getSourceEditorContext()$path)
# NHS Digital TRE Data Coverage ------------------------------------------------
t.data_coverage_source = read.csv(paste0(current_dir_data,
'/Data/export_dashboard_NHSD_20221102_data_coverage.csv'))
data_coverage = t.data_coverage_source %>%
mutate(date_ym = ifelse(date_ym=="", NA, date_ym)) %>%
#remove null dates
filter(!is.na(date_ym)) %>%
separate(date_ym, c("date_y", "date_m"), remove=FALSE, sep = '-') %>%
mutate(across(.cols = c(date_y, date_m), .fn = ~ as.numeric(.))) %>%
#expand to include all dates in between where counts=0
group_by(dataset) %>%
expand(date_y=min(date_y):max(date_y),date_m=1:12) %>%
ungroup() %>%
mutate(date_ym = paste0(str_pad(date_y,width=4,pad=0,side="left"),
"-",
str_pad(date_m,width=2,pad=0,side="left"))) %>%
left_join(t.data_coverage, by = c("date_ym","dataset")) %>%
mutate(across(.cols = starts_with('n'),
.fn = ~ replace_na(.,0))) %>%
group_by(dataset) %>%
arrange(dataset,date_y,date_m) %>%
mutate(across(.cols = starts_with("n"),
.names = "{.col}_cum",
.fn = ~ cumsum(.))) %>%
filter(!if_all(ends_with("cum"), ~ . == 0)) %>%
select(!ends_with("cum")) %>%
#date month names for plot annotation
mutate(date_name = paste0(month.name[date_m]," ", date_y, ": ")) %>%
pivot_longer(cols=starts_with("n"), names_to="Type",values_to="N") %>%
mutate(date_format = as.Date(paste(date_ym, 1, sep="-"), "%Y-%m-%d"))
data_coverage = t.data_coverage_source %>%
mutate(date_ym = ifelse(date_ym=="", NA, date_ym)) %>%
#remove null dates
filter(!is.na(date_ym)) %>%
separate(date_ym, c("date_y", "date_m"), remove=FALSE, sep = '-') %>%
mutate(across(.cols = c(date_y, date_m), .fn = ~ as.numeric(.))) %>%
#expand to include all dates in between where counts=0
group_by(dataset) %>%
expand(date_y=min(date_y):max(date_y),date_m=1:12) %>%
ungroup() %>%
mutate(date_ym = paste0(str_pad(date_y,width=4,pad=0,side="left"),
"-",
str_pad(date_m,width=2,pad=0,side="left"))) %>%
left_join(t.data_coverage_source, by = c("date_ym","dataset")) %>%
mutate(across(.cols = starts_with('n'),
.fn = ~ replace_na(.,0))) %>%
group_by(dataset) %>%
arrange(dataset,date_y,date_m) %>%
mutate(across(.cols = starts_with("n"),
.names = "{.col}_cum",
.fn = ~ cumsum(.))) %>%
filter(!if_all(ends_with("cum"), ~ . == 0)) %>%
select(!ends_with("cum")) %>%
#date month names for plot annotation
mutate(date_name = paste0(month.name[date_m]," ", date_y, ": ")) %>%
pivot_longer(cols=starts_with("n"), names_to="Type",values_to="N") %>%
mutate(date_format = as.Date(paste(date_ym, 1, sep="-"), "%Y-%m-%d"))
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
linkage = read.csv(paste0(current_dir_data,'/Data/linkage.csv'))
runApp()
data_dictionary = read_excel_allsheets(paste0(current_dir_data,
'/Data/TRE_DD_391419_j3w9t.xlsx'),
tibble = FALSE,
except_sheet_no = 1,
skip = 2)
View(data_dictionary)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data_dictionary)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
